{"ast":null,"code":"var _jsxFileName = \"/Users/plgi001/Desktop/Personal Repositories/DMR/components/Table/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport \"./style.scss\";\nimport React from \"react\";\nimport { Table as SemanticTable } from \"semantic-ui-react\";\nimport { useTable, useSortBy } from \"react-table\"; // import { TableSortLabel } from \"@material-ui/core\";\n\nfunction Table({\n  columns,\n  data,\n  tableProps = {},\n  className = \"\",\n  hooks = []\n}) {\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  }, useSortBy, ...hooks); // Render the UI for your table\n\n  return __jsx(TableUI, {\n    getTableProps: getTableProps,\n    className: className,\n    tableProps: tableProps,\n    headerGroups: headerGroups,\n    prepareRow: prepareRow,\n    rows: rows,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  });\n}\n\nexport default Table;\nexport const TableUI = ({\n  getTableProps,\n  className,\n  tableProps = {},\n  headerGroups,\n  prepareRow,\n  page,\n  rows\n}) => {\n  return __jsx(\"div\", {\n    className: \"DMRTableWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, __jsx(SemanticTable, _extends({\n    fixed: true\n  }, getTableProps(), {\n    className: `DMRTable ${className}`\n  }, tableProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }), __jsx(SemanticTable.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, headerGroups.map((headerGroup, idx) => __jsx(SemanticTable.Row, _extends({\n    key: idx\n  }, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }), headerGroup.headers.map((column, idx2) => __jsx(SemanticTable.HeaderCell, _extends({\n    key: idx2,\n    className: `header-${idx}`,\n    style: {\n      width: column.width\n    }\n  }, column.getHeaderProps(column.getSortByToggleProps()), {\n    title: column.Header && !column.disableSortBy ? `Sort By ${column.Header}` : \"\",\n    sorted: column.isSorted ? column.isSortedDesc ? \"descending\" : \"ascending\" : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }), column.render(\"Header\")))))), __jsx(SemanticTable.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, (page ? page : rows).map((row, i) => {\n    prepareRow(row);\n    return __jsx(SemanticTable.Row, _extends({}, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 15\n      }\n    }), row.cells.map(cell => {\n      return __jsx(SemanticTable.Cell, _extends({}, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }\n      }), cell.render(\"Cell\"));\n    }));\n  }))));\n};","map":{"version":3,"sources":["/Users/plgi001/Desktop/Personal Repositories/DMR/components/Table/index.tsx"],"names":["React","Table","SemanticTable","useTable","useSortBy","columns","data","tableProps","className","hooks","getTableProps","headerGroups","rows","prepareRow","TableUI","page","map","headerGroup","idx","getHeaderGroupProps","headers","column","idx2","width","getHeaderProps","getSortByToggleProps","Header","disableSortBy","isSorted","isSortedDesc","undefined","render","row","i","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import \"./style.scss\";\nimport React from \"react\";\nimport { Table as SemanticTable } from \"semantic-ui-react\";\nimport {\n  useTable,\n  Column,\n  useSortBy,\n  HeaderGroup,\n  Row,\n  Cell,\n} from \"react-table\";\n// import { TableSortLabel } from \"@material-ui/core\";\n\ntype TableProps = {\n  /** Make sure you have accessor propety for your columns for sort to work. */\n  columns: Column[];\n  data: any[];\n  tableProps?: any;\n  className?: string;\n  hooks?: any[];\n};\n\nfunction Table({\n  columns,\n  data,\n  tableProps = {},\n  className = \"\",\n  hooks = [],\n}: TableProps) {\n  // Use the state and functions returned from useTable to build your UI\n  const { getTableProps, headerGroups, rows, prepareRow } = useTable(\n    {\n      columns,\n      data,\n    },\n    useSortBy,\n    ...hooks\n  );\n\n  // Render the UI for your table\n  return (\n    <TableUI\n      getTableProps={getTableProps}\n      className={className}\n      tableProps={tableProps}\n      headerGroups={headerGroups}\n      prepareRow={prepareRow}\n      rows={rows}\n    />\n  );\n}\n\nexport default Table;\n\nexport const TableUI = ({\n  getTableProps,\n  className,\n  tableProps = {},\n  headerGroups,\n  prepareRow,\n  page,\n  rows,\n}: {\n  getTableProps: (props?: object | undefined) => object;\n  className: string;\n  tableProps?: object;\n  headerGroups: HeaderGroup<object>[];\n  prepareRow: (row: Row<object>) => void;\n  page?: any[];\n  rows: Row<object>[];\n}) => {\n  return (\n    <div className=\"DMRTableWrapper\">\n      <SemanticTable\n        fixed\n        {...getTableProps()}\n        className={`DMRTable ${className}`}\n        {...tableProps}\n      >\n        <SemanticTable.Header>\n          {headerGroups.map((headerGroup, idx) => (\n            <SemanticTable.Row key={idx} {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column, idx2) => (\n                <SemanticTable.HeaderCell\n                  key={idx2}\n                  className={`header-${idx}`}\n                  style={{\n                    width: column.width,\n                  }}\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\n                  title={\n                    column.Header && !column.disableSortBy\n                      ? `Sort By ${column.Header}`\n                      : \"\"\n                  }\n                  sorted={\n                    column.isSorted\n                      ? column.isSortedDesc\n                        ? \"descending\"\n                        : \"ascending\"\n                      : undefined\n                  }\n                >\n                  {/* <TableSortLabel\n                    active={column.isSorted}\n                    direction={column.isSortedDesc ? \"desc\" : \"asc\"}\n                    hideSortIcon={!column.isSorted}\n                    disabled={column.disableSortBy}\n                  > */}\n                  {column.render(\"Header\")}\n                  {/* </TableSortLabel> */}\n                </SemanticTable.HeaderCell>\n              ))}\n            </SemanticTable.Row>\n          ))}\n        </SemanticTable.Header>\n        <SemanticTable.Body>\n          {(page ? page : rows).map((row, i) => {\n            prepareRow(row);\n            return (\n              <SemanticTable.Row {...row.getRowProps()}>\n                {row.cells.map((cell: Cell) => {\n                  return (\n                    <SemanticTable.Cell {...cell.getCellProps()}>\n                      {cell.render(\"Cell\")}\n                    </SemanticTable.Cell>\n                  );\n                })}\n              </SemanticTable.Row>\n            );\n          })}\n        </SemanticTable.Body>\n      </SemanticTable>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}